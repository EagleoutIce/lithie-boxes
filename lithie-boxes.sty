%% lithie-boxes.sty
%%
%% -----------------------------------------
%% Florian Sihler, 30.09.2020
%%
%% Standalone and improved box-module of lilly
%% boxes. This variant won't use the
%% tcbtheorems lib to allow more flexibility.

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{lithie-boxes}[2020/12/08 EagleoutIce - lilly box-port and improvement]
\def\libx@version{1.1}

%% Options
%% -----------------------------------------------------------------------------

% TODO: different numbering for singles?
\def\libx@boxes@lockstyle@{}
\DeclareOption{lockhigh}{% lock on high
\@ifundefined{chapter}{%
    \def\libx@boxes@lockstyle@{section}
}{
    \def\libx@boxes@lockstyle@{chapter}
}
}
\DeclareOption{locklow}{% lock on low
\@ifundefined{chapter}{
    \def\libx@boxes@lockstyle@{subsection}
}{
    \def\libx@boxes@lockstyle@{section}
}
}

\DeclareOption{nolock}{ \def\libx@boxes@lockstyle@{} }

\newif\iflibx@cpalette@
\DeclareOption{cpalette}{ \libx@cpalette@true }
\DeclareOption{nocpalette}{ \libx@cpalette@false }

\newif\iflibx@autostyle@% supplies some defaults for styling. loadsd cpalletes
\DeclareOption{autostyle}{ \libx@cpalette@true\libx@autostyle@true }
\DeclareOption{noautostyle}{ \libx@autostyle@false }

\def\libx@environments@trans{}
\DeclareOption{germanenv}{ \def\libx@environments@trans{German} }
\DeclareOption{englishenv}{ \def\libx@environments@trans{English} }%defaults for trans
\DeclareOption{autoenv}{ \def\libx@environments@trans{} }

\newif\iflibx@forcekomadisabled@
\newif\iflibx@comp@koma@
\DeclareOption{koma}{ \libx@comp@koma@true\libx@forcekomadisabled@false }
\DeclareOption{nokoma}{ \libx@forcekomadisabled@true }

\def\libx@language{}
\DeclareOption{german}{ \def\libx@language{German} }
\DeclareOption{english}{ \def\libx@language{English} }
\DeclareOption{autolang}{ \def\libx@language{} }

\newif\iflibx@modes@overwrite@
\DeclareOption{overwrite}{ \libx@modes@overwrite@true }
\DeclareOption{nooverwrite}{ \libx@modes@overwrite@false }

\@ifundefined{@@libx@noparfill}{%
    \def\@@libx@noparfill{\parfillskip=\z@ plus 1fil}
}{}
\let\libx@parfill@\@@libx@noparfill
\DeclareOption{parfill}{ \def\libx@parfill@{} }
\DeclareOption{noparfill}{ \let\libx@parfill@\@@libx@noparfill }
\def\libx@parskip@{\parskip=\smallskipamount}

\ProcessOptions*


% TODO: TRANSLATE IN TABLE OF CONTENTS (SIDEBAR) ETC. MAKE WITH translatelet
% ----------------------------------------
% koma-script abstraction (for tocloft)

\@ifclassloaded{scrartcl}{\libx@comp@koma@true}{}
\@ifclassloaded{scrreprt}{\libx@comp@koma@true}{}
\@ifclassloaded{scrbook}{\libx@comp@koma@true}{}

\iflibx@forcekomadisabled@
    \libx@comp@koma@false
\fi

\def\libxlistofheading#1{%
    \PackageWarning{lithie-boxes}{This command is only available with the koma-compatibilities.}%
}

\@ifpackageloaded{microtype}{%
    \def\lbix@ls@microtypehook{\microtypesetup{protrusion=false}}
}{\def\lbix@ls@microtypehook{}}%

\iflibx@comp@koma@
    \def\libxlistofheading#1{\def\libx@listof@heading##1{#1}}
    \libxlistofheading{\section*{#1\@mkboth{#1}{#1}}}
    \AtBeginDocument{\let\libx@starttoc\@starttoc}
    \typeout{Koma-Script detected. lithie-boxes using a fallback mechanism.}%
    %\KOMAoption{listof}{entryprefix}%
    % important: dropping the optional reset
    \def\libx@newlistof#1#2#3{%
        \newcounter{#1}%
        \expandafter\newlength\csname cft#1numwidth\endcsname
        \expandafter\gdef\csname l@#1\endcsname##1##2{\@dottedtocline{1}{\@nameuse{cft#1numwidth}}{\@nameuse{cft#1numwidth}}{##1}{##2}}%
        \expandafter\gdef\csname listof#1\endcsname{\begingroup
            \lbix@ls@microtypehook
            \def\contentsname{#3}% may?
            \libx@listof@heading{\contentsname}%
            \libx@starttoc{#2}%
        \endgroup}%
    }%
\else
    \RequirePackage{tocloft}
    \let\libx@newlistof\newlistof
\fi

%% Packages
\RequirePackage{bookmark,tcolorbox,environ,calc,fontawesome,translator}
\tcbuselibrary{skins,breakable,hooks}

\ifx\libx@language\@empty
    \languagepath{\languagename,English}
\else
    \languagepath{\libx@language,\languagename,English}
\fi

%% lengths
\newlength\libx@numwidth
\newlength\libx@numwidth@offset
\libx@numwidth@offset=.235cm

%% pgfkeys of boxes
\newif\iflibx@HasEmblem@
\newif\iflibx@CustomList@
\newif\iflibx@BoxEnabled@
% NOTE: changed to style modification 'style derivative'
% \newif\iflibx@UseBox@
\pgfkeys{
    /libx@keys/.is family, /libx@keys,
    name/.store in = \libx@box@Name,
    title/.store in = \libx@box@Title,
    box color/.store in = \libx@box@BoxColor,
    pre code/.store in = \libx@box@PreCode,
    in code/.store in = \libx@box@InCode,
    out code/.store in = \libx@box@OutCode,
    post code/.store in = \libx@box@PostCode,
    use style/.store in = \libx@box@UseStyle,
    emblem/.store in = \libx@box@Emblem,
    style derivative/.store in=\libx@box@StyleDerivative,
    has emblem/.is if=libx@HasEmblem@,
    custom list/.is if=libx@CustomList@,
    box enabled/.is if=libx@BoxEnabled@,
    list name/.store in = \libx@box@ListName,
    list men/.store in =\libx@box@ListMen,
    defaults/.style={%
        name=noname,title={\noexpand\libx@box@Name},%
        box color=black,use style={},% mandatory!
        emblem={},list name={\noexpand\libx@box@Name}, pre code={}, in code={},has emblem=false,%
        out code={},post code={},custom list=true,
        list men=NO,box enabled=true,style derivative={}%
    }
}

% #1 boxid, #2 key
\def\libx@persist#1#2{%
    \expandafter\protected@xdef\csname libx@box@persist@#1@#2\endcsname{\@nameuse{libx@box@#2}}%
}

\def\libx@box@get#1#2{\csname libx@box@persist@#1@#2\endcsname}
\def\libx@get#1{\csname libx@box@persist@\libx@boxid @#1\endcsname}
\def\libx@get@ifempty#1#2#3{%
    \protected@edef\@libx@tmp{\@nameuse{libx@box@persist@\libx@boxid @#1}}%
    \ifx\@libx@tmp\@empty#2\else#3\fi
}

% #1 boxud, #2 key
\def\libx@persistif#1#2{\begingroup\globaldefs=1% true/false set must be global too
\expandafter\newif\csname iflibx@box@persist@#1@#2@\endcsname
% we assgign the same value as the general if
\csname iflibx@#2@\endcsname
    \csname libx@box@persist@#1@#2@true\endcsname
\else
    \csname libx@box@persist@#1@#2@false\endcsname
\fi\endgroup}

\def\libx@box@if#1#2{\csname iflibx@box@persist@#1@#2@\endcsname}
\def\libx@if#1#2#3{\csname iflibx@box@persist@\libx@boxid @#1@\endcsname #2\else#3\fi}

% #1 box id, #2 datafield, #3 new value
\def\libx@update@boxdata#1#2#3{\begingroup
    \edef\libx@boxid{#1}%
    % This allows them to be persisted:
    \@namedef{libx@box@#2}{#3}%
    \libx@persist{\libx@boxid}{#2}%
\endgroup}

% #1 box id, #2 ifname, #3 new value (true|false)
\def\libx@update@boxif#1#2#3{\begingroup
    \edef\libx@boxid{#1}%
    % This allows them to be persisted:
    \csname libx@#2@#3\endcsname% if-hook
    \libx@persistif{\libx@boxid}{#2}%
\endgroup}


\long\def\libx@preatend#1{\gpreto{\enddocument}{#1}}

% #1 Boxkeys, #2 tikzkeys for box
% #3 Boxname (set boxnamekey)
% #4 Title (boxtitlekey)
% #5 GroupId
\def\libx@RegisterBox#1#2#3#4#5{\begingroup%
    \edef\libx@boxid{#5}%
    \typeout{Reg: #3, t: #4, g: #5}%
    \pgfkeys{/libx@keys,defaults,#1,name=#3,title=#4}%
    \forcsvlist{\libx@persist{\libx@boxid}}{Name,Title,BoxColor,PreCode,InCode,%
            Outcode,PostCode,UseStyle,Emblem,ListName,ListMen,StyleDerivative}%
    \forcsvlist{\libx@persistif{\libx@boxid}}{HasEmblem,CustomList,BoxEnabled}%
    % setup id counter:
    \@ifundefined{c@@libx@box@\libx@get{ListMen}@id}{%
        \newcounter{@libx@box@\libx@get{ListMen}@id}%
        \libx@preatend{\begingroup\makeatletter\edef\libx@boxid{#5}% just to carry for sub commands
            \ifnum\arabic{@libx@box@\libx@get{ListMen}@id}=0\else
            \foreach \i in {1,...,\arabic{@libx@box@\libx@get{ListMen}@id}}{%
                \@nameuse{libx@box@\libx@get{ListMen}@contentsline@\i}%
            }%
            \fi
        \endgroup}%
        % chapter spacing in list as all commands are appended in the end we step the internal boxid as it is used only on the command-inside
        \AtEndPreamble{%
            \ifcsname chapter\endcsname
            \xpreto\chapter{% only increment if already got one
                \noexpand\ifnum\noexpand\value{@libx@box@\libx@box@get{#5}{ListMen}@id}>0\noexpand\relax%
                \noexpand\stepcounter{@libx@box@\libx@box@get{#5}{ListMen}@id}%
                \noexpand\libx@addtocontents{@libx@box@\libx@box@get{#5}{ListMen}@id}{\libx@box@get{#5}{ListMen}}{\noexpand\protect\noexpand\addvspace{\noexpand\medskipamount}}%
                \noexpand\fi
            }%
            \else
            \xpreto\section{% only increment if already got one
                \noexpand\ifnum\noexpand\value{@libx@box@\libx@box@get{#5}{ListMen}@id}>0\noexpand\relax
                \noexpand\stepcounter{@libx@box@\libx@box@get{#5}{ListMen}@id}%
                \noexpand\libx@addtocontents{@libx@box@\libx@box@get{#5}{ListMen}@id}{\libx@box@get{#5}{ListMen}}{\noexpand\protect\noexpand\addvspace{\noexpand\medskipamount}}%
                \noexpand\fi
            }%
            \fi
        }%
    }{}
% Define the main environment of the box
\globaldefs=1%
    % NOTE: #1 is short form!
    \let\libx@newboxenv\newenvironment
    \iflibx@modes@overwrite@% check if already there
        \ifcsname#3\endcsname
            \let\libx@newboxenv\renewenvironment
        \fi
    \fi
    \libx@newboxenv{#3}{%
        \edef\libx@boxid{#5}%
        \@ifnextchar(%
            {\@libx@boxconsume@with@boxopt{#2}{#4}{#5}}%
            {\@libx@boxconsume@with@boxopt{#2}{#4}{#5}()}%
    }{% end of defined environment
        \libx@if{BoxEnabled}{%
            \libx@read@box@default@end{#5}%
        }{\endlibx@read@box@hidden}%
    }%
    % these mappings are used (internally) for user commands
    % for easier access
    \@namedef{@libx@map@envshort@#3}{#5}
\globaldefs=0%
\endgroup}

\def\@libx@boxconsume@with@boxopt#1#2#3(#4){
    \@ifnextchar[%
        {\@libx@boxconsume@with@bothopt{#1}{#2}{#3}(#4)}%
        {\@libx@boxconsume@with@bothopt{#1}{#2}{#3}(#4)[]}
}

% #1 tikzkeys #2 Title #3 GroupId box opt #4 box opt #5 Referenztitel #6 Titel
\def\@libx@boxconsume@with@bothopt#1#2#3(#4)[#5]#6{%
    \ifx!#5!%
        \def\libx@curbox@shorttitle{#6}%
    \else
        \def\libx@curbox@shorttitle{#5}%
    \fi
% First we check if the box is disabled
    \libx@if{BoxEnabled}{%
        \libx@read@box@default{#3}{#6}{#1}{#4}%
    }{%
        % the expandafter hinders the tokens to be read when libx@if gets expanded and is false
        \expandafter\libx@read@box@hidden
    }\ignorespaces
}

% The boxes
\NewEnviron{libx@read@box@hidden}{}
\AtEndPreamble{%
    \@ifundefined{hypertarget}{%
        \long\def\libx@hypertarget#1#2{\label{#1}#2}%
        \newcommand\libx@hyperref[2][]{#2}%
        % gobble the star:
        \def\libx@pageref{\protect\@ifstar\pageref\pageref}%
        \def\libx@phantomsection{}%
    }{% adapt to redefinitions
        \def\libx@hypertarget{\hypertarget}%
        \def\libx@pageref{\pageref}%
        \def\libx@phantomsection{\phantomsection}%
        \def\libx@hyperref{\hyperref}%
    }%
}

\def\libx@setnameref#1{\protected@edef\@currentlabelname{#1}}
\def\libx@namerefprobe#1{%
    \PackageError{lithie-boxes}{%
        Request for nameref-command without package loaded.%
    }{Load namref or a package loading nameref, like hyperref.}%
}
\let\libx@nameref\libx@namerefprobe

\AfterEndPreamble{%
  \ifdefined\NR@gettitle
    \let\libx@setnameref\NR@gettitle
  \fi
  \ifdefined\nameref
    \let\libx@nameref\nameref
    \let\libx@namerefprobe\@gobble
  \fi
}


% id | num | short | long
\def\libx@loadmark#1#2#3#4{%
    \expandafter\gdef\csname @libx@box@marker@#1@num\endcsname{#2}%
    \expandafter\gdef\csname @libx@box@marker@#1@short\endcsname{#3}%
    \expandafter\gdef\csname @libx@box@marker@#1@long\endcsname{#4}%
}

% #1 long title
\def\libx@storemark#1{%
    % global lock the counter value
    \protected@edef\@libx@markertag{\libx@get{ListMen}\arabic{@libx@box@\libx@get{ListMen}@id}}%
    % update autoref label
    \edef\@currentlabel{\thetcbcounter}%
    % stored signature: <num>:<short>:<long>
    \def\@libx@tmp@store{{\thetcbcounter}{\libx@curbox@shorttitle}{#1}}%
    \expandafter\expandafter\expandafter\protected@xdef
            \expandafter\csname\@libx@markertag\endcsname{\@libx@tmp@store}%
    % we mirror it to auxout:
    \protected@write\@auxout{}{\protect\libx@loadmark{\expandafter\protect\@libx@markertag}\@libx@tmp@store}%
}

% #1 is list-men #2 is number
\def\libx@marker@getnum#1#2{\csname @libx@box@marker@#1#2@num\endcsname}
\def\libx@marker@getshort#1#2{\csname @libx@box@marker@#1#2@short\endcsname}
\def\libx@marker@getlong#1#2{\csname @libx@box@marker@#1#2@long\endcsname}

% #1 id, #2 title, #3 default tikz args, #4 further box args
\def\libx@read@box@default#1#2#3#4{\begingroup
    \edef\libx@boxid{#1}%
    \libx@get{PreCode}%
    \libx@phantomsection
    % Note: We do this extra to control expansion
    % To get the correct counter value we cheat by guessing the next id of this box
    % then we will create a marker to a command defined inside the box getting
    % the exact counter value
    \edef\libx@tmp@nextval{\the\numexpr\value{@libx@box@\libx@get{ListMen}@id}+1\relax}%
    \protected@edef\@libx@tmpnr{%
        \noexpand\libx@setnameref{%
            % Note: this has to be a '\space' or ' ' as this is used when pattern match to drop
            \libx@get{Title}\space\noexpand\libx@marker@getnum{\libx@get{ListMen}}{\libx@tmp@nextval}\space(\noexpand\libx@marker@getshort{\libx@get{ListMen}}{\libx@tmp@nextval})%
        }%
    }%
    \@libx@tmpnr
    \stepcounter{@libx@box@\libx@get{ListMen}@id}%
% we check if we use the box style
    \begin{\libx@get{UseStyle}}%
        [% Tikz arguments:
            #3%
        ]{% Title (braces guard):
            {\libx@get{Title}}%
        }{% Further arguments for tcolorbox
            before upper app={\ignorespacesafterend},%
            hypertarget=@libx@ht:\libx@get{ListMen}\arabic{@libx@box@\libx@get{ListMen}@id},
            before title pre={%
                \@libx@box@title@pre{#2}%
                \label{@libx:\libx@get{ListMen}\arabic{@libx@box@\libx@get{ListMen}@id}}%
            },#4%
        }{#2}%
\libx@storemark{#2}%
\libx@get{InCode}}

\def\libx@read@box@default@end#1{%
    \edef\libx@boxid{#1}%
% execute the post codes
    \libx@get{OutCode}%
    \end{\libx@get{UseStyle}}%
    \libx@get{PostCode}\endgroup
\ignorespacesafterend}


% #1: title
\def\@libx@box@title@pre#1{%
    \libx@if{CustomList}{%
        \libx@if{HasEmblem}{%
            % We register with emblem
            \expandafter\@libx@box@list@add@element@emblem
        }{%
            % We register without emblem
            \expandafter\@libx@box@list@add@element
        }% args:
        {\libx@get{ListName}}% list name
        {\libx@get{ListMen}}% list men
        {\thetcbcounter}% counter
        {\libx@curbox@shorttitle}% title
        {\libx@get{Emblem}}% may be ignored
        {@libx@box@\libx@get{ListMen}@id}% the id will be used to shiput list add
        \ignorespacesafterend
    }{}% Do nothing
}

% NOTE: we don't use numwidth as this allows us to save space on multiline
\def\libx@list@numberformat#1{\makebox[\libx@numwidth+\libx@numwidth@offset][r]{#1}\libx@sp}
\def\libx@sp{\hskip.1cm}
% #5 will be dropped as it is the emblem
\def\@libx@box@list@add@element#1#2#3#4#5#6{%
    \refstepcounter{#1}%
    \libx@addcontentsline{#6}{#2}{#1}{\libx@list@numberformat{#3}#4}%
}

\def\@libx@box@list@add@element@emblem#1#2#3#4#5#6{%
    \refstepcounter{#1}%
    \libx@addcontentsline{#6}{#2}{#1}{\libx@list@numberformat{#3}\makebox[.45cm][c]{\scriptsize#5}\libx@sp\ignorespaces#4}%
}

% TODO: store current catcode?
\gdef\libx@currentstyle{default}
\def\libx@loadstyle@ending{.style}
\def\libx@LoadBoxStyle#1{\typeout{Loading box style: '#1\libx@loadstyle@ending'...}\makeatletter\input{#1\libx@loadstyle@ending}\gdef\libx@currentstyle{#1}}

\def\libx@RefreshBoxStyle{\typeout{Refreshing box style: '\libx@currentstyle\libx@loadstyle@ending'...}\@libx@updatestyle}

\def\@libx@getcurtar#1{% we expect i and curboxid to be set
#1:\libx@get{ListMen}\i%
}
\def\@libx@getrefpage{\libx@pageref*{\@libx@getcurtar{@libx}}}
\AtEndPreamble{%
    \let\libx@raw@addcontentsline\addcontentsline%
    \patchcmd{\libx@raw@addcontentsline}{\thepage}{\@libx@getrefpage}{}{}%
    \loop% we stop if replace throws error
        \patchcmd{\libx@raw@addcontentsline}{\@currentHref}{\@libx@getcurtar{@libx@ht}}{\iftrue}{\iffalse}%
    \repeat
    \let\libx@raw@addtocontents\addtocontents
}


\def\@libx@addtocontents#1#2#3{%
    % we want the exact id:
    \expandafter\protected@xdef\csname libx@box@#2@contentsline@#1\endcsname{%
        \noexpand\libx@raw@addtocontents{#2}{#3}%
    }%
}

\def\libx@addtocontents#1#2#3{%
    \@libx@addtocontents{\arabic{#1}}{#2}{#3}%
}

\def\@libx@addcontentsline#1#2#3#4{%
    % we want the exact id:
    \expandafter\protected@xdef\csname libx@box@#2@contentsline@#1\endcsname{%
        \noexpand\libx@raw@addcontentsline{#2}{#3}{#4}%
    }%
}

\def\libx@addcontentsline#1#2#3#4{%
    \@libx@addcontentsline{\arabic{#1}}{#2}{#3}{#4}%
}

% ----------------------------------------
% box definitions

% initialize the number within lock
\ifx\libx@boxes@lockstyle@\@empty% no lock:
\pgfqkeys{/tcb/new}{%
    lithie@box@number@within/.style={}%
}
% note effective width will be '\libx@numwidth@offset' higher
\setlength\libx@numwidth{.4cm-\libx@numwidth@offset}%
\else% got lock
\pgfqkeys{/tcb/new}{%
    lithie@box@number@within/.style={number within=\libx@boxes@lockstyle@}%
}
\setlength\libx@numwidth{.9cm-\libx@numwidth@offset}%
\fi

% TODO: restructure?
% TODO: allow without emblem and 'other' second style?
% #1 internal list name #2 internal list men #3 list of title text
% #4 Emblem for starred variant #5 color
% #6 style to use #7 id
% #8 environment name
% #9 title
\def\libx@RegisterBoxPair#1#2#3#4#5#6#7#8#9{%
    \libx@newlistof{#1}{#2}{#3}%
    % kept for compat :D
    \expandafter\setlength\csname cft#1numwidth\endcsname{\libx@numwidth}%
    % set name
    \expandafter\providecommand\csname #1name\endcsname{#9}%
    % \expandafter\protected@edef\csname cft#2titlefont\endcsname{\@nameuse{cft#2titlefont}\selectfont}%
% Register no star
    \libx@RegisterBox{list name=#1,list men=#2,has emblem=true,in code=\libx@parfill@\libx@parskip@\noindent,%
    box color=#5,use style=libx@box@#6}{}{#8}{#9}{#7}%
    % if the emblem is empty we do not define the starred variant!
    \ifx!#4!\else
        \libx@RegisterBox{list name=#1,list men=#2,has emblem=true,emblem=\protect#4,%
    in code=\libx@parfill@\libx@parskip@\noindent,box color=#5,use style=libx@box@#6}{}{#8*}{#9}{#7@s}%
    \fi
}

% ----------------------------------------
% default boxstyle registration

% list of all boxes for style updates
\def\libx@list@boxes{}

\tcbset{%
    lithie@box@style@default/.style={%
        enhanced jigsaw,pad before break*=2mm,pad after break=2mm,%
        lines before break=3,before skip=\z@,boxrule=\z@,toprule=.5mm,%
        bottomtitle=.5mm,bottomrule=1.1mm,after skip=\z@,%
        enlarge top by=.55\baselineskip,enlarge bottom by=.55\baselineskip,%
        sharp corners=south,breakable, colback=\libx@get{BoxColor}!4!white,colframe=\libx@get{BoxColor},tikz={#1}%
    },%
    lithie@box@style@default@plain/.style={%
        enhanced jigsaw,pad before break*=2mm,pad after break=2mm,%
        lines before break=3,before skip=\z@,boxrule=\z@,%
        enlarge top by=.2\baselineskip,enlarge bottom by=.2\baselineskip,attach title to upper={\medskip\nobreak\par\nobreak},coltitle=black,boxsep=\z@,left=\z@,right=\z@,%
        opacityback=0,opacityframe=0,%
        breakable,tikz={#1}%
    }%
}

% get the new stlyes
\pgfqkeys{/tcb/new}{%
    lithie@box@style@default@init/.style={%
        auto counter,lithie@box@number@within,%
        reset counter on overlays%
    },%
    lithie@box@style@other@init/.style={use counter from=#1}%
}

\def\libx@title@strut{\vphantom{\large I}}

% #1 is prefix, #2 is number, #3 is text
\def\libx@default@typeset@title#1#2#3{\begingroup%
    \sbox0{\libx@get@ifempty{Emblem}{}{\libx@get{Emblem}\thinspace~}#2 #3~}%
    \textbf{\textsc{\libx@title@strut{}\usebox0} \hfill \parbox[t]{\linewidth-\wd0-1em}{\raggedleft\textbf{#1}}}%
\endgroup}


% #1 Name of the style
% #2 other options
\def\libx@RegisterNewDefaultStyle#1#2{%
    \listadd{\libx@list@boxes}{#1}% \libx@get{StyleDerivative}
    \tcbset{%
        libx@style@defaults@libx@box@#1/.style={#2}%
    }%
    \newtcolorbox[lithie@box@style@default@init]{libx@box@#1}[4][]{%
        lithie@box@style@default\libx@get{StyleDerivative}={##1},##3,libx@style@defaults@libx@box@#1,%
        title={\libx@default@typeset@title{##4}{##2}{\thetcbcounter}}%
    }%
}

% #1 Name of style
% #2 style update (#1-#4)
\def\libx@UpdateBoxStyle#1#2{%
    \renewtcolorbox[lithie@box@style@other@init={libx@box@#1}]{libx@box@#1}[4][]{#2}%
}
% simple swap for consume
\def\@libx@UpdateHelper#1#2{\libx@UpdateBoxStyle{#2}{#1}}

\def\libx@UpdateAllBoxStyles#1{%
    \forlistloop{\@libx@UpdateHelper{#1}}{\libx@list@boxes}%
}

% ----------------------------------------
% translations

\providetranslation[to=German]{List of}{Alle}

\def\libx@translateenv#1#2{
    % empty auto:
    \ifx\libx@environments@trans\@empty
        \protected@edef\libx@tmp{\noexpand\translatelet{\csname @libx@#1@envname\endcsname}{#2}}%
    \else
        \protected@edef\libx@tmp{\noexpand\translatelet[to=\libx@environments@trans]{\csname @libx@#1@envname\endcsname}{#2}}%
    \fi
    \libx@tmp
}

\def\libx@provide@translation#1#2#3{%
    \ifcsname #1\endcsname\else
        % we have to do this to avoid warnings with hyperref
        \expandafter\translatelet\csname #1@@listof\endcsname{#2}%
        \expandafter\translatelet\csname #1@@name\endcsname{#3}%
        \@namedef{#1}{\csname #1@@listof\endcsname\ \csname #1@@name\endcsname}%
    \fi
}

% ----------------------------------------
% default boxes

%% ---
\providetranslation[to=German]{definition}{definition}
\providetranslation[to=German]{definitions}{definitionen}
\providetranslation[to=German]{Definition}{Definition}
\providetranslation[to=German]{Definitions}{Definitionen}

\translatelet{\@libx@defstyle}{Definition}
\libx@RegisterNewDefaultStyle{\@libx@defstyle}{}

\libx@translateenv{def}{definition}

% note if this order is wrong redef of '\definitionslistname' is needed
\libx@provide@translation{definitionslistname}{List of}{Definitions}
\libx@RegisterBoxPair%
% List definition and emblem:
{definitions}{ldefs}{\definitionslistname}{\faStar}%
% color, style, id:
{purple}{\@libx@defstyle}{def}%
% environment name and Prefix:
{\@libx@def@envname}{\translate{Definition}}

% ---
\providetranslation[to=German]{remark}{bemerkung}
\providetranslation[to=German]{remarks}{bemerkungen}
\providetranslation[to=German]{Remark}{Bemerkung}
\providetranslation[to=German]{Remarks}{Bemerkungen}

\translatelet{\@libx@remstyle}{Remark}
\libx@RegisterNewDefaultStyle{\@libx@remstyle}{}

\libx@translateenv{rem}{remark}

\libx@provide@translation{remarkslistname}{List of}{Remarks}
\libx@RegisterBoxPair%
% List definition and emblem:
{remarks}{lrem}{\remarkslistname}{\faStar}%
% color, style, id:
{teal}{\@libx@remstyle}{bem}%
% environment name and Prefix:
{\@libx@rem@envname}{\translate{Remark}}

%% ---
\providetranslation[to=German]{theorem}{satz}
\providetranslation[to=German]{theorems}{sätze}
\providetranslation[to=German]{Theorem}{Satz}
\providetranslation[to=German]{Theorems}{Sätze}

\translatelet{\@libx@theostyle}{Theorem}
\libx@RegisterNewDefaultStyle{\@libx@theostyle}{}

\libx@translateenv{the}{theorem}

\libx@provide@translation{theoremslistname}{List of}{Theorems}
\libx@RegisterBoxPair%
% List definition and emblem:
{theorems}{ltheo}{\theoremslistname}{\faStar}%
% color, style, id:
{orange}{\@libx@theostyle}{sat}%
% environment name and Prefix:
{\@libx@the@envname}{\translate{Theorem}}

%% ---
\providetranslation[to=German]{example}{beispiel}
\providetranslation[to=German]{examples}{beispiele}
\providetranslation[to=German]{Example}{Beispiel}
\providetranslation[to=German]{Examples}{Beispiele}

\translatelet{\@libx@exastyle}{Example}
\libx@RegisterNewDefaultStyle{\@libx@exastyle}{}

\libx@translateenv{exa}{example}

\libx@provide@translation{exampleslistname}{List of}{Examples}
\libx@RegisterBoxPair%
% List definition and emblem:
{examples}{lexa}{\exampleslistname}{\faStar}%
% color, style, id:
{olive}{\@libx@exastyle}{bei}%
% environment name and Prefix:
{\@libx@exa@envname}{\translate{Example}}

%% ---
\providetranslation[to=German]{lemma}{lemma}
\providetranslation[to=German]{lemmas}{lemmata}
\providetranslation[to=German]{Lemma}{Lemma}
\providetranslation[to=German]{Lemmas}{Lemmata}

\translatelet{\@libx@lemstyle}{Lemma}
\libx@RegisterNewDefaultStyle{\@libx@lemstyle}{}

\libx@translateenv{lem}{lemma}

\libx@provide@translation{lemmaslistname}{List of}{Lemmas}
\libx@RegisterBoxPair%
% List definition and emblem:
{lemmas}{llem}{\lemmaslistname}{\faStar}%
% color, style, id:
{violet}{\@libx@lemstyle}{lem}%
% environment name and Prefix:
{\@libx@lem@envname}{\translate{Lemma}}

%% ---
\providetranslation[to=German]{proof}{beweis}
\providetranslation[to=German]{proofs}{beweise}
\providetranslation[to=German]{Proof}{Beweis}
\providetranslation[to=German]{Proofs}{Beweise}

\translatelet{\@libx@prostyle}{Proof}
\libx@RegisterNewDefaultStyle{\@libx@prostyle}{after upper={\quad\nobreak\null\nobreak\hfill\nobreak\faSquareO}}

\libx@translateenv{pro}{proof}

\libx@provide@translation{proofslistname}{List of}{Proofs}
\libx@RegisterBoxPair%
% List definition and emblem:
{proofs}{lpro}{\proofslistname}{\faStar}%
% color, style, id:
{cyan}{\@libx@prostyle}{bew}%
% environment name and Prefix:
{\@libx@pro@envname}{\translate{Proof}}

%% ---
\providetranslation[to=German]{summary}{zusammenfassung}
\providetranslation[to=German]{summaries}{zusammenfassungen}
\providetranslation[to=German]{Summary}{Zusammenfassung}
\providetranslation[to=German]{Summaries}{Zusammenfassungen}

\translatelet{\@libx@sumstyle}{Summary}
\libx@RegisterNewDefaultStyle{\@libx@sumstyle}{}

\libx@translateenv{sum}{summary}

% synopses
\libx@provide@translation{summarieslistname}{List of}{Summaries}
\libx@RegisterBoxPair%
% List definition and emblem:
{summaries}{lsum}{\summarieslistname}{\faStar}%
% color, style, id:
{lime!80!blue}{\@libx@sumstyle}{zsf}%
% environment name and Prefix:
{\@libx@sum@envname}{\translate{Summary}}


% ----------------------------------------
% Utility control

\def\@libx@decodeenv#1{%
    \ifcsname @libx@map@envshort@#1\endcsname
        \@nameuse{@libx@map@envshort@#1}%
    \else\PackageError{lithie-boxes}{No box-mapping for '#1'}{Maybe the box was not loaded yet?}\fi
}

% TODO: make more of them
% starred variant sets both
% #1 derivative to use
% #2 boxname
\newcommand*{\SetBoxPlain}{\@ifstar\libx@setboth@boxplain\libx@set@boxplain}

\newcommand*{\libx@setboth@boxplain}[2][@plain]{%
    \libx@set@boxplain[#1]{#2}%
    \libx@set@boxplain[#1]{#2*}%
}

\newcommand*{\libx@set@boxplain}[2][@plain]{\libx@update@boxdata{\@libx@decodeenv{#2}}{StyleDerivative}{#1}}

% ----------------------------------------

\newcommand*{\SetBoxesPlain}{\@ifstar\libx@setboth@boxesplain\libx@set@boxesplain}
\newcommand*{\libx@setboth@boxesplain}[2][@plain]{\forcsvlist{\SetBoxPlain*[#1]}{#2}}
\newcommand*{\libx@set@boxesplain}[2][@plain]{\forcsvlist{\SetBoxPlain[#1]}{#2}}

% ----------------------------------------

\newcommand*{\SetBoxDisabled}{%
    \@ifstar\libx@setboth@boxdisabled\libx@set@boxdisabled%
}


\newcommand*{\libx@setboth@boxdisabled}[2][false]{%
    \libx@set@boxdisabled[#1]{#2}%
    \libx@set@boxdisabled[#1]{#2*}%
}

\newcommand*{\libx@set@boxdisabled}[2][false]{\libx@update@boxif{\@libx@decodeenv{#2}}{BoxEnabled}{#1}}

% ----------------------------------------

\newcommand*{\SetBoxesDisabled}{\@ifstar\libx@setboth@boxesdisabled\libx@set@boxesdisabled}
\newcommand*{\libx@setboth@boxesdisabled}[2][false]{\forcsvlist{\SetBoxDisabled*[#1]}{#2}}
\newcommand*{\libx@set@boxesdisabled}[2][false]{\forcsvlist{\SetBoxDisabled[#1]}{#2}}

% ----------------------------------------

% maybe with rgb support?
% ifstar: include 'starred' variant
% #1 box id, #2 new color
\newcommand*{\SetBoxColor}{\@ifstar\libx@setboth@boxcolor\libx@set@boxcolor}

\def\libx@setboth@boxcolor#1#2{%
    \libx@set@boxcolor{#1}{#2}%
    \libx@set@boxcolor{#1*}{#2}%
}

\def\libx@set@boxcolor#1#2{\libx@update@boxdata{\@libx@decodeenv{#1}}{BoxColor}{#2}}


% ----------------------------------------
% Ref system

% ref box with given label
% if starred hide title
\DeclareRobustCommand*\boxref{\@ifstar\libx@num@nameref\libx@long@nameref}

\long\def\@libx@num@nameref#1 (#2)#3\@nil{#1}

\def\libx@thirdoffive#1#2#3#4#5{#3}
\def\libx@num@nameref#1{%
    % assure nameref:
    \libx@namerefprobe{}%
    % we directly access the label def
    \ifcsname r@#1\endcsname%
        \protected@edef\libx@tmp{\@nameuse{r@#1}}%
        \protected@edef\libx@tmp{\expandafter\libx@thirdoffive\libx@tmp\relax\relax\relax\relax\relax}%
        \protected@edef\libx@tmp{\noexpand\@libx@num@nameref\libx@tmp ?? ()\noexpand\@nil}%
        \libx@hyperref[#1]{\libx@tmp}%
    \else
        \typeout{Warning boxref-num '#1' not found.}%
    \fi
}

% TODO: maybe allow to use 'Def' instead of 'Definition'?
% allow rename as with normal nameref?
% Note: this is a reimplementation as the behaviour might change
% note without star this is same as boxref (allows better let's)
\DeclareRobustCommand*\boxnameref{\@ifstar\libx@short@nameref\libx@long@nameref}

\def\@libx@short@nameref#1 (#2)#3\@nil{#2}

\def\libx@thirdoffive#1#2#3#4#5{#3}
\def\libx@long@nameref#1{%
    % assure nameref:
    \libx@namerefprobe{}%
    % we directly access the label def
    \ifcsname r@#1\endcsname%
        \protected@edef\libx@tmp{\@nameuse{r@#1}}%
        \protected@edef\libx@tmp{\expandafter\libx@thirdoffive\libx@tmp\relax\relax\relax\relax\relax}%
        \libx@hyperref[#1]{\libx@tmp}%
    \else
        \typeout{Warning boxref-short '#1' not found.}%
    \fi
}

\def\libx@short@nameref#1{%
    % assure nameref:
    \libx@namerefprobe{}%
    % we directly access the label def
    \ifcsname r@#1\endcsname
        \protected@edef\libx@tmp{\@nameuse{r@#1}}%
        \protected@edef\libx@tmp{\expandafter\libx@thirdoffive\libx@tmp\relax\relax\relax\relax\relax}%
        \protected@edef\libx@tmp{\noexpand\@libx@short@nameref\libx@tmp\noexpand\@nil}%
        \libx@hyperref[#1]{\libx@tmp}%
    \else
        \typeout{Warning boxref-short '#1' not found.}%
    \fi
}


% ----------------------------------------
% Color Palettes Control

\iflibx@cpalette@
\ifcsname cpl@registered@palettes\endcsname\else%
    \PackageError{lithie-boxes}{cpalette requested, but package not loaded}
    {You have to load the 'color-palettes' package yourself if you use the 'cpalette'-Option.}%
\fi % Add to the hook... as error we can do it in main

\let\libx@old@cpl@hooks\cpl@hooks
\def\cpl@hooks{% Add to the hook
    \libx@old@cpl@hooks
    \libx@cpalette@hook
}

\providecommand\libxdefcolor{paletteA} \providecommand\libxthecolor{paletteC} \providecommand\libxlemcolor{paletteC}
\providecommand\libxsumcolor{paletteD}
\providecommand\libxprocolor{gray} \providecommand\libxremcolor{gray} \providecommand\libxexacolor{gray}

\def\libx@cpalette@hook{%
\libx@setboth@boxcolor{\@libx@def@envname}{\libxdefcolor}%
\libx@setboth@boxcolor{\@libx@the@envname}{\libxthecolor}%
\libx@setboth@boxcolor{\@libx@lem@envname}{\libxlemcolor}%
\libx@setboth@boxcolor{\@libx@sum@envname}{\libxsumcolor}%
\libx@setboth@boxcolor{\@libx@pro@envname}{\libxprocolor}%
\libx@setboth@boxcolor{\@libx@rem@envname}{\libxremcolor}%
\libx@setboth@boxcolor{\@libx@exa@envname}{\libxexacolor}%
}
\fi

% ----------------------------------------
% Auto style

\iflibx@autostyle@
\libx@setboth@boxesplain{\@libx@rem@envname}
\libx@setboth@boxesplain{\@libx@exa@envname}
\libx@setboth@boxesplain{\@libx@lem@envname}
\libx@setboth@boxesplain{\@libx@pro@envname}
\fi

% ----------------------------------------------
% Further User commands

\let\LoadBoxStyle\libx@LoadBoxStyle
\let\RegisterBox\libx@RegisterBox
\let\RegisterNewDefaultStyle\libx@RegisterNewDefaultStyle
\let\CurrentBoxStyle\libx@currentstyle
\let\RefreshBoxStyle\libx@RefreshBoxStyle
\endinput