%% lithie-boxes.sty
%%
%% -----------------------------------------
%% Florian Sihler, 30.09.2020
%%
%% Standalone and improved box-module of lilly
%% boxes. This variant won't use the 
%% tcbtheorems lib to allow more flexibility.

%% Options
%% -----------------------------------------------------------------------------

% TODO: different numbering for singles?
\def\libx@boxes@lockstyle@{}
\DeclareOption{lockhigh}{% lock on high
    \@ifundefined{chapter}{%
        \def\libx@boxes@lockstyle@{section}%
    }{%
        \def\libx@boxes@lockstyle@{chapter}%
    }%
}
\DeclareOption{locklow}{% lock on low
    \@ifundefined{chapter}{%
        \def\libx@boxes@lockstyle@{subsection}%
    }{%
        \def\libx@boxes@lockstyle@{section}%
    }%
}

\DeclareOption{nolock}{ \def\libx@boxes@lockstyle@{} }

\ProcessOptions*\relax%

%% Packages
\RequirePackage{tcolorbox,environ,tocloft,calc,amssymb,fontawesome}
\tcbuselibrary{skins,breakable,hooks}

%% lengths
\newlength\libx@numwidth%
\newlength\libx@numwidth@offset%
\setlength\libx@numwidth@offset{.235cm}

%% pgfkeys of boxes
\newif\iflibx@HasEmblem@
\newif\iflibx@CustomList@
\newif\iflibx@BoxEnabled@
\newif\iflibx@UseBox@
\pgfkeys{
    /libx@keys/.is family, /libx@keys,
    name/.store in = \libx@box@Name,
    title/.store in = \libx@box@Title,
    box color/.store in = \libx@box@BoxColor,
    pre code/.store in = \libx@box@PreCode,
    in code/.store in = \libx@box@InCode,
    out code/.store in = \libx@box@OutCode,
    post code/.store in = \libx@box@PostCode,
    use style/.store in = \libx@box@UseStyle,
    emblem/.store in = \libx@box@Emblem,
    has emblem/.is if=libx@HasEmblem@,
    custom list/.is if=libx@CustomList@,
    box enabled/.is if=libx@BoxEnabled@,
    use box/.is if = libx@UseBox@,
    list name/.store in = \libx@box@ListName,
    list text/.store in =\libx@box@ListText,
    list men/.store in =\libx@box@ListMen,
    defaults/.style={%
        name=noname, title={\noexpand\libx@box@Name},%
        box color=black,%
        use style=libx@box@Definition,%
        emblem={}, list name={\noexpand\libx@box@Name},%
        list text={Alle \noexpand\libx@box@Name}, pre code={}, in code={},%
        out code={},post code={},custom list=true,
        list men=NO,box enabled=true,use box=true%
    }
}

% #1 boxid, #2 key
\def\libx@persist#1#2{%
\expandafter\protected@xdef\csname libx@box@perist@#1@#2\endcsname{\@nameuse{libx@box@#2}}%
}

\def\libx@box@get#1#2{\@nameuse{libx@box@perist@#1@#2}}
\def\libx@get#1{\@nameuse{libx@box@perist@\libx@boxid @#1}}
\def\libx@get@ifempty#1#2#3{%
    \protected@edef\@libx@tmp{\@nameuse{libx@box@perist@\libx@boxid @#1}}%
    \expandafter\ifx\expandafter!\@libx@tmp!%
    #2\else#3\fi%
}

% #1 boxud, #2 key
\def\libx@persistif#1#2{\bgroup\globaldefs=1% true/false set must be global too
\expandafter\newif\csname iflibx@box@perist@#1@#2@\endcsname%
% we assgign the same value as the general if
\@nameuse{iflibx@#2@}%
    \@nameuse{libx@box@perist@#1@#2@true}%
\else%
    \@nameuse{libx@box@perist@#1@#2@false}%
\fi\egroup}

\def\libx@box@if#1#2{\@nameuse{iflibx@box@perist@#1@#2@}}
\def\libx@if#1#2#3{\@nameuse{iflibx@box@perist@\libx@boxid @#1@}#2\else#3\fi}

% #1 Boxkeys, #2 tikzkeys for box
% #3 Boxname (set boxnamekey)
% #4 Title (boxtitlekey)
% #5 GroupId
\def\libx@RegisterBox#1#2#3#4#5{\bgroup%
    \edef\libx@boxid{#5}%
    \pgfkeys{/libx@keys,defaults,#1,name=#3,title=#4}%
    \forcsvlist{\libx@persist{\libx@boxid}}{Name,Title,BoxColor,PreCode,InCode,%
                                            Outcode,PostCode,UseStyle,Emblem,%
                                            ListName,ListText,ListMen}%
    \forcsvlist{\libx@persistif{\libx@boxid}}{HasEmblem,CustomList,%
                                              BoxEnabled,UseBox}%
    % setup id counter:
    \@ifundefined{c@@libx@box@\libx@get{ListMen}@id}{%
        \newcounter{@libx@box@\libx@get{ListMen}@id}%
        \AtEndDocument{\bgroup\edef\libx@boxid{#5}% just to carry for sub commands
            \foreach \i in {1,...,\arabic{@libx@box@\libx@get{ListMen}@id}}{% 
                \@nameuse{libx@box@\libx@get{ListMen}@contentsline@\i}%
            }%
        \egroup}%
    }{}
% Define the main environment of the box
\globaldefs=1%
    % NOTE: #1 is short form!
    \newenvironment{#3}[2][]{%
        \edef\libx@boxid{#5}%
        \ifx!##1!%
            \def\libx@curbox@shorttitle{##2}%
        \else%
            \def\libx@curbox@shorttitle{##1}%
        \fi%
% First we check if the box is disabled
        \libx@if{BoxEnabled}{%
            \libx@read@box@default{#5}{##2}{#2}%
        }{% 
            % the expandafter hinders the tokens to be read when libx@if gets expanded and is false
            \expandafter\libx@read@box@hidden%
        }\ignorespaces%
    }{% end of defined environment
        \libx@if{BoxEnabled}{%
            \libx@read@box@default@end{#5}%
        }{%
            \endlibx@read@box@hidden%
        }%
    }%
\globaldefs=0%
\egroup}

% The boxes
\NewEnviron{libx@read@box@hidden}{}

\AtEndPreamble{%
    \@ifundefined{hypertarget}{%
        \long\def\libx@hypertarget#1#2{\label{#1}#2}%
        % gobble the star:
        \def\libx@pageref{\protect\@ifstar\pageref\pageref}%
    }{%
        \let\libx@hypertarget\hypertarget%
        \let\libx@pageref\pageref%
    }%
}
% #1 id, #2 title, #3 default tikz args
\def\libx@read@box@default#1#2#3{\begingroup%
    \edef\libx@boxid{#1}%
    \libx@get{PreCode}%
% we check if we use the box style
    \libx@if{UseBox}{%
        \libx@box@usestyle%
    }{%
        \libx@box@useplainstyle%
    }%
    \begin{\libx@get{UseStyle}}%
            [% Tikz arguments:
                #3%
            ]{% Title (braces guard):
                \libx@hypertarget{@libx@ht:\libx@get{ListMen}\arabic{@libx@box@\libx@get{ListMen}@id}}{\libx@get{Title}}%
            }{% Further arguments for tcolorbox
                libx@box@current@style@modification,%
                before upper app={\ignorespacesafterend},%
                before title pre={%
                    \@libx@box@title@pre{#2}%
                    \label{auto:\libx@get{ListMen}\thetcbcounter}%
                    \label{@libx:\libx@get{ListMen}\arabic{@libx@box@\libx@get{ListMen}@id}}%
                }%
            }{#2}%
    \libx@get{InCode}%
\endgroup}

\def\libx@read@box@default@end#1{\begingroup%
    \edef\libx@boxid{#1}%
% execute the post codes
    \libx@get{OutCode}%
    \end{\libx@get{UseStyle}}%
    \libx@get{PostCode}%
\endgroup\ignorespacesafterend}

% style
\def\libx@box@usestyle{%
    \tcbset{libx@box@current@style@modification/.style={}}% No Modifications needed :D
}

% TODO: command like 'make plain' which will use plain design
\def\libx@box@useplainstyle{%
    \tcbset{libx@box@current@style@modification/.style={}}% TODO: plain design
}

% #1: title
\def\@libx@box@title@pre#1{%
    \libx@if{CustomList}{%
        \stepcounter{@libx@box@\libx@get{ListMen}@id}%
        \libx@if{HasEmblem}{%
            % We register with emblem
            \expandafter\@libx@box@list@add@element@emblem%
        }{%
            % We register without emblem
            \expandafter\@libx@box@list@add@element%
        }% args:
        {\libx@get{ListName}}% list name
        {\libx@get{ListMen}}% list men
        {\thetcbcounter}% counter
        {\libx@curbox@shorttitle}% title
        {\libx@get{Emblem}}% may be ignored
        {@libx@box@\libx@get{ListMen}@id}% the id will be used to shiput list add
        \ignorespacesafterend%
    }{}% Do nothing
}

% NOTE: we don't use numwidth as this allows us to save space on multiline
\def\libx@sp{\hskip.1cm}
% #5 will be dropped as it is the emblem
\def\@libx@box@list@add@element#1#2#3#4#5#6{%
    \refstepcounter{#1}%
    \libx@addcontentsline{#6}{#2}{#1}{\makebox[\libx@numwidth+\libx@numwidth@offset][r]{#3}\libx@sp#4}%
}

\def\@libx@box@list@add@element@emblem#1#2#3#4#5#6{%
    \refstepcounter{#1}%
    \libx@addcontentsline{#6}{#2}{#1}{\makebox[\libx@numwidth+\libx@numwidth@offset][r]{#3}\libx@sp\makebox[.4cm][c]{#5}\libx@sp\ignorespaces#4}%
}

% TODO: store current catcode?
\def\libx@loadstyle@ending{.style}
\def\libx@LoadStyle#1{\typeout{Loading style: '#1\libx@loadstyle@ending'...}\makeatletter\input{#1\libx@loadstyle@ending}}

\def\@libx@getcurtar#1{% we expect i and curboxid to be set
#1:\libx@get{ListMen}\i%
}
\def\@libx@getrefpage{%
\libx@pageref*{\@libx@getcurtar{@libx}}%
}
\AtEndPreamble{%
    \let\libx@raw@addcontentsline\addcontentsline%
    \patchcmd{\libx@raw@addcontentsline}{\thepage}{\@libx@getrefpage}{}{}%
    \loop% we stop if replace throws error
        \patchcmd{\libx@raw@addcontentsline}{\@currentHref}{\@libx@getcurtar{@libx@ht}}{\iftrue}{\iffalse}%
    \repeat%
}

\def\@libx@addcontentsline#1#2#3#4{%
    % we want the exact id:
    \expandafter\protected@xdef\csname libx@box@#2@contentsline@#1\endcsname{%
        \noexpand\libx@raw@addcontentsline{#2}{#3}{#4}%
    }%
}

\def\libx@addcontentsline#1#2#3#4{%
    \@libx@addcontentsline{\arabic{#1}}{#2}{#3}{#4}%
}




% ----------------------------------------
% box definitions

% initialize the number within lock
\expandafter\ifx\expandafter!\libx@boxes@lockstyle@!% no lock:
\pgfqkeys{/tcb/new}{%
    lithie@box@number@within/.style={}%
}
% note effective width will be '\libx@numwidth@offset' higher
\setlength\libx@numwidth{.4cm-\libx@numwidth@offset}%
\else% got lock
\pgfqkeys{/tcb/new}{%
    lithie@box@number@within/.style={number within=\libx@boxes@lockstyle@}%
}
\setlength\libx@numwidth{.9cm-\libx@numwidth@offset}%
\fi

% TODO: restructure?
% TODO: allow without emblem and 'other' second style?
% #1 internal list name #2 internal list men #3 list of title text 
% #4 Emblem for starred variant #5 color
% #6 style to use #7 id
% #8 environment name
% #9 title
\def\libx@RegisterBoxPair#1#2#3#4#5#6#7#8#9{%
    \newlistof{#1}{#2}{#3}%
    \expandafter\setlength\csname cft#1numwidth\endcsname{\libx@numwidth}%
% Register no star
    \libx@RegisterBox{list name=#1,list men=#2,has emblem=true,in code=\noindent,%
    box color=#5,use style=libx@box@#6}{}{#8}{#9}{#7}%
    \libx@RegisterBox{list name=#1,list men=#2,has emblem=true,emblem=\protect#4,%
    in code=\noindent,box color=#5,use style=libx@box@#6}{}{#8*}{#9}{#7@s}%
}

% ----------------------------------------
% default boxstyle registration

% list of all boxes for style updates
\def\libx@list@boxes{}

\tcbset{%
    lithi@box@style@default/.style={%
        enhanced jigsaw,pad before break*=2mm,pad after break=2mm,%
        lines before break=3,before skip=0pt,boxrule=0mm,toprule=0.5mm,%
        bottomtitle=0.5mm,bottomrule=1.2mm,after skip=0pt,%
        enlarge top by=0.2\baselineskip,enlarge bottom by=0.2\baselineskip,%
        sharp corners=south,breakable, colback=\libx@get{BoxColor}!5!white,colframe=\libx@get{BoxColor},tikz={#1}%
    }%
}

% get the new stlyes
\pgfqkeys{/tcb/new}{%
    lithie@box@style@default@init/.style={%
        auto counter,lithie@box@number@within%
    },%
    lithie@box@style@other@init/.style={%
        use counter from=#1%
    }%
}

\def\libx@title@strut{\vphantom{\large I}}

% #1 is prefix, #2 is number, #3 is text
\def\libx@typeset@title#1#2#3{\bgroup%
    \def\libx@tmp@title{\libx@get{Emblem} #2 #3~}%
    \textbf{\textsc{\libx@title@strut{}\libx@tmp@title} \hfill \parbox[t]{\linewidth-\widthof{\libx@tmp@title}-1em}{\raggedleft\textbf{#1}}}%
\egroup}


% #1 Name of the style
% #2 other options
\def\libx@RegisterNewDefaultStyle#1#2{%
    \listadd{\libx@list@boxes}{#1}%
    \newtcolorbox[lithie@box@style@default@init]{libx@box@#1}[4][]{%
        lithi@box@style@default={##1},##3,#2,%
        title={\libx@typeset@title{##4}{##2}{\thetcbcounter}}%
    }%
}

% #1 Name of style
% #2 style update (#1-#4)
\def\libx@UpdateBoxStyle#1#2{%
    \renewtcolorbox[lithie@box@style@other@init={libx@box@#1}]{libx@box@#1}[4][]{%
        #2
    }%
}
% simple swap for consume
\def\@libx@UpdateHelper#1#2{\libx@UpdateBoxStyle{#2}{#1}}

\def\libx@UpdateAllBoxStyles#1{%
    \forlistloop{\@libx@UpdateHelper{#1}}{\libx@list@boxes}
}

% ----------------------------------------
% default boxes

\libx@RegisterNewDefaultStyle{Definition}{}
% default colors TODO: colors
% TODO: option to set color directly
\colorlet{libx@color@definition}{purple}

\def\definitionsname{List of Definitions}
\libx@RegisterBoxPair%
% List definition:
{definitions}{ldefs}{\definitionsname}%
% Emblem and color:
{\faStar}{libx@color@definition}%
% style and id:
{Definition}{def}%
% environment name and Prefix:
{definition}{Definition}


\libx@RegisterNewDefaultStyle{Bemerkung}{}
% default colors TODO: colors
% TODO: option to set color directly
\colorlet{libx@color@bemerkung}{teal}

\def\remarksname{List of Remarks}
\libx@RegisterBoxPair%
% List definition:
{remarks}{lrem}{\remarksname}%
% Emblem and color:
{\faStar}{libx@color@bemerkung}%
% style and id:
{Bemerkung}{bem}%
% environment name and Prefix:
{bemerkung}{Bemerkung}







% ----------------------------------------
% Utility control
















% ----------------------------------------------
% User commands

\let\LoadStyle\libx@LoadStyle
\let\RegisterBox\libx@RegisterBox
\let\RegisterNewDefaultStyle\libx@RegisterNewDefaultStyle

\endinput