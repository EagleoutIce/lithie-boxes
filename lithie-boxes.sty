%% lithie-boxes.sty
%%
%% -----------------------------------------
%% Florian Sihler, 30.09.2020
%%
%% Standalone and improved box-module of lilly
%% boxes. This variant won't use the 
%% tcbtheorems lib to allow more flexibility.

%% Options
%% -----------------------------------------------------------------------------

% TODO: different numbering for singles?
\def\libx@boxes@lockstyle@{}
\DeclareOption{lockhigh}{% lock on high
    \@ifundefined{chapter}{%
        \def\libx@boxes@lockstyle@{section}%
    }{%
        \def\libx@boxes@lockstyle@{chapter}%
    }%
}
\DeclareOption{locklow}{% lock on low
    \@ifundefined{chapter}{%
        \def\libx@boxes@lockstyle@{subsection}%
    }{%
        \def\libx@boxes@lockstyle@{section}%
    }%
}

\DeclareOption{nolock}{ \def\libx@boxes@lockstyle@{} }

\newif\iflibx@cpalette@%
\DeclareOption{cpalette}{ \libx@cpalette@true }
\DeclareOption{nocpalette}{ \libx@cpalette@false }

\newif\iflibx@autostyle@% supplies some defaults for styling. loadsd cpalletes
\DeclareOption{autostyle}{ \libx@cpalette@true\libx@autostyle@true }
\DeclareOption{noautostyle}{ \libx@autostyle@false }

\ProcessOptions*\relax%

%% Packages
\RequirePackage{tcolorbox,environ,tocloft,calc,amssymb,fontawesome}
\tcbuselibrary{skins,breakable,hooks}

%% lengths
\newlength\libx@numwidth%
\newlength\libx@numwidth@offset%
\setlength\libx@numwidth@offset{.235cm}

%% pgfkeys of boxes
\newif\iflibx@HasEmblem@
\newif\iflibx@CustomList@
\newif\iflibx@BoxEnabled@
% NOTE: changed to style modification 'style derivative'
% \newif\iflibx@UseBox@
\pgfkeys{
    /libx@keys/.is family, /libx@keys,
    name/.store in = \libx@box@Name,
    title/.store in = \libx@box@Title,
    box color/.store in = \libx@box@BoxColor,
    pre code/.store in = \libx@box@PreCode,
    in code/.store in = \libx@box@InCode,
    out code/.store in = \libx@box@OutCode,
    post code/.store in = \libx@box@PostCode,
    use style/.store in = \libx@box@UseStyle,
    emblem/.store in = \libx@box@Emblem,
    style derivative/.store in=\libx@box@StyleDerivative,
    has emblem/.is if=libx@HasEmblem@,
    custom list/.is if=libx@CustomList@,
    box enabled/.is if=libx@BoxEnabled@,
    list name/.store in = \libx@box@ListName,
    list text/.store in =\libx@box@ListText,
    list men/.store in =\libx@box@ListMen,
    defaults/.style={%
        name=noname,title={\noexpand\libx@box@Name},%
        box color=black,use style={},% mandatory!
        emblem={},list name={\noexpand\libx@box@Name},%
        list text={Alle \noexpand\libx@box@Name}, pre code={}, in code={},%
        out code={},post code={},custom list=true,
        list men=NO,box enabled=true,style derivative={}%
    }
}

% #1 boxid, #2 key
\def\libx@persist#1#2{%
\expandafter\protected@xdef\csname libx@box@persist@#1@#2\endcsname{\@nameuse{libx@box@#2}}%
}

\def\libx@box@get#1#2{\@nameuse{libx@box@persist@#1@#2}}
\def\libx@get#1{\@nameuse{libx@box@persist@\libx@boxid @#1}}
\def\libx@get@ifempty#1#2#3{%
    \protected@edef\@libx@tmp{\@nameuse{libx@box@persist@\libx@boxid @#1}}%
    \expandafter\ifx\expandafter!\@libx@tmp!%
    #2\else#3\fi%
}

% #1 boxud, #2 key
\def\libx@persistif#1#2{\bgroup\globaldefs=1% true/false set must be global too
\expandafter\newif\csname iflibx@box@persist@#1@#2@\endcsname%
% we assgign the same value as the general if
\@nameuse{iflibx@#2@}%
    \@nameuse{libx@box@persist@#1@#2@true}%
\else%
    \@nameuse{libx@box@persist@#1@#2@false}%
\fi\egroup}

\def\libx@box@if#1#2{\@nameuse{iflibx@box@persist@#1@#2@}}
\def\libx@if#1#2#3{\@nameuse{iflibx@box@persist@\libx@boxid @#1@}#2\else#3\fi}

% #1 box id, #2 datafield, #3 new value
\def\libx@update@boxdata#1#2#3{\bgroup
    \edef\libx@boxid{#1}%
    % This allows them to be persisted:
    \@namedef{libx@box@#2}{#3}%
    \libx@persist{\libx@boxid}{#2}%
\egroup}

% #1 box id, #2 ifname, #3 new value (true|false)
\def\libx@update@boxif#1#2#3{\bgroup
    \edef\libx@boxid{#1}%
    % This allows them to be persisted:
    \@nameuse{libx@#2@#3}% if-hook
    \libx@persistif{\libx@boxid}{#2}%
\egroup}

% #1 Boxkeys, #2 tikzkeys for box
% #3 Boxname (set boxnamekey)
% #4 Title (boxtitlekey)
% #5 GroupId
\def\libx@RegisterBox#1#2#3#4#5{\bgroup%
    \edef\libx@boxid{#5}%
    \pgfkeys{/libx@keys,defaults,#1,name=#3,title=#4}%
    \forcsvlist{\libx@persist{\libx@boxid}}{Name,Title,BoxColor,PreCode,InCode,%
            Outcode,PostCode,UseStyle,Emblem,ListName,ListText,ListMen,StyleDerivative}%
    \forcsvlist{\libx@persistif{\libx@boxid}}{HasEmblem,CustomList,BoxEnabled}%
    % setup id counter:
    \@ifundefined{c@@libx@box@\libx@get{ListMen}@id}{%
        \newcounter{@libx@box@\libx@get{ListMen}@id}%
        \AtEndDocument{\bgroup\edef\libx@boxid{#5}% just to carry for sub commands
            \foreach \i in {1,...,\arabic{@libx@box@\libx@get{ListMen}@id}}{% 
                \@nameuse{libx@box@\libx@get{ListMen}@contentsline@\i}%
            }%
        \egroup}%
    }{}
% Define the main environment of the box
\globaldefs=1%
    % NOTE: #1 is short form!
    \newenvironment{#3}[2][]{%
        \edef\libx@boxid{#5}%
        \ifx!##1!%
            \def\libx@curbox@shorttitle{##2}%
        \else%
            \def\libx@curbox@shorttitle{##1}%
        \fi%
% First we check if the box is disabled
        \libx@if{BoxEnabled}{%
            \libx@read@box@default{#5}{##2}{#2}%
        }{% 
            % the expandafter hinders the tokens to be read when libx@if gets expanded and is false
            \expandafter\libx@read@box@hidden%
        }\ignorespaces%
    }{% end of defined environment
        \libx@if{BoxEnabled}{%
            \libx@read@box@default@end{#5}%
        }{%
            \endlibx@read@box@hidden%
        }%
    }%
    % these mappings are used (internally) for user commands 
    % for easier access
    \@namedef{@libx@map@envshort@#3}{#5}
\globaldefs=0%
\egroup}

% The boxes
\NewEnviron{libx@read@box@hidden}{}

\AtEndPreamble{%
    \@ifundefined{hypertarget}{%
        \long\def\libx@hypertarget#1#2{\label{#1}#2}%
        \newcommand\libx@hyperref[2][]{#2}%
        % gobble the star:
        \def\libx@pageref{\protect\@ifstar\pageref\pageref}%
        \def\libx@phantomsection{}%
    }{%
        \let\libx@hypertarget\hypertarget%
        \let\libx@pageref\pageref%
        \let\libx@phantomsection\phantomsection%
        \let\libx@hyperref\hyperref%
    }%
}

\def\libx@setnameref#1{\protected@edef\@currentlabelname{#1}}
\def\libx@namerefprobe#1{%
    \PackageError{lithie-boxes}{%
        Request for nameref-command without package loaded.%
    }{Load namref or a package loading nameref, like hyperref.}%
}
\let\libx@nameref\libx@namerefprobe%

\AfterEndPreamble{%
  \ifdefined\NR@gettitle%
    \let\libx@setnameref\NR@gettitle%
  \fi%
  \ifdefined\nameref%
    \let\libx@nameref\nameref%
    \def\libx@namerefprobe#1{}%
  \fi%
}


% id | num | short | long 
\def\libx@loadmark#1#2#3#4{%
    \expandafter\gdef\csname @libx@box@marker@#1@num\endcsname{#2}%
    \expandafter\gdef\csname @libx@box@marker@#1@short\endcsname{#3}%
    \expandafter\gdef\csname @libx@box@marker@#1@long\endcsname{#4}%
}

% #1 long title
\def\libx@storemark#1{%
    % global lock the counter value
    \edef\@libx@markertag{\libx@get{ListMen}\arabic{@libx@box@\libx@get{ListMen}@id}}%
    % stored signature: <num>:<short>:<long>
    \def\@libx@tmp@store{{\thetcbcounter}{\libx@curbox@shorttitle}{#1}}%
    \expandafter\expandafter\expandafter\xdef%
            \expandafter\csname\@libx@markertag\endcsname{\@libx@tmp@store}%
    % we mirror it to auxout:
    \protected@write\@auxout{}{\protect\libx@loadmark{\expandafter\protect\@libx@markertag}\@libx@tmp@store}%
}

% #1 is list-men #2 is number
\def\libx@marker@getnum#1#2{\@nameuse{@libx@box@marker@#1#2@num}}
\def\libx@marker@getshort#1#2{\@nameuse{@libx@box@marker@#1#2@short}}
\def\libx@marker@getlong#1#2{\@nameuse{@libx@box@marker@#1#2@long}}

% #1 id, #2 title, #3 default tikz args
\def\libx@read@box@default#1#2#3{\begingroup%
    \edef\libx@boxid{#1}%
    \libx@get{PreCode}%
    \libx@phantomsection%
    % Note: We do this extra to control expansion
    % To get the correct counter value we cheat by guessing the next id of this box
    % then we will create a marker to a command defined inside the box getting
    % the exact counter value
    \edef\libx@tmp@nextval{\the\numexpr\value{@libx@box@\libx@get{ListMen}@id}+1\relax}%
    \protected@edef\@libx@tmpnr{%
        \noexpand\libx@setnameref{%
            % Note: this has to be a '\space' or ' ' as this is used when pattern match to drop
            \libx@get{Title}\space\noexpand\libx@marker@getnum{\libx@get{ListMen}}{\libx@tmp@nextval}\space(\noexpand\libx@marker@getshort{\libx@get{ListMen}}{\libx@tmp@nextval})%
        }%
    }%
    \@libx@tmpnr%
% we check if we use the box style
    \begin{\libx@get{UseStyle}}%
            [% Tikz arguments:
                #3%
            ]{% Title (braces guard):
                \libx@hypertarget{@libx@ht:\libx@get{ListMen}\arabic{@libx@box@\libx@get{ListMen}@id}}{\libx@get{Title}}%
            }{% Further arguments for tcolorbox
                before upper app={\ignorespacesafterend},%
                before title pre={%
                    \@libx@box@title@pre{#2}%
                    \label{@libx:\libx@get{ListMen}\arabic{@libx@box@\libx@get{ListMen}@id}}%
                }%
            }{#2}%
    \libx@storemark{#2}%
    \libx@get{InCode}%
\endgroup}

\def\libx@read@box@default@end#1{\begingroup%
    \edef\libx@boxid{#1}%
% execute the post codes
    \libx@get{OutCode}%
    \end{\libx@get{UseStyle}}%
    \libx@get{PostCode}%
\endgroup\ignorespacesafterend}


% #1: title
\def\@libx@box@title@pre#1{%
    \libx@if{CustomList}{%
        \stepcounter{@libx@box@\libx@get{ListMen}@id}%
        \libx@if{HasEmblem}{%
            % We register with emblem
            \expandafter\@libx@box@list@add@element@emblem%
        }{%
            % We register without emblem
            \expandafter\@libx@box@list@add@element%
        }% args:
        {\libx@get{ListName}}% list name
        {\libx@get{ListMen}}% list men
        {\thetcbcounter}% counter
        {\libx@curbox@shorttitle}% title
        {\libx@get{Emblem}}% may be ignored
        {@libx@box@\libx@get{ListMen}@id}% the id will be used to shiput list add
        \ignorespacesafterend%
    }{}% Do nothing
}

% NOTE: we don't use numwidth as this allows us to save space on multiline
\def\libx@sp{\hskip.1cm}
% #5 will be dropped as it is the emblem
\def\@libx@box@list@add@element#1#2#3#4#5#6{%
    \refstepcounter{#1}%
    \libx@addcontentsline{#6}{#2}{#1}{\makebox[\libx@numwidth+\libx@numwidth@offset][r]{#3}\libx@sp#4}%
}

\def\@libx@box@list@add@element@emblem#1#2#3#4#5#6{%
    \refstepcounter{#1}%
    \libx@addcontentsline{#6}{#2}{#1}{\makebox[\libx@numwidth+\libx@numwidth@offset][r]{#3}\libx@sp\makebox[.4cm][c]{#5}\libx@sp\ignorespaces#4}%
}

% TODO: store current catcode?
\gdef\libx@currentstyle{default}
\def\libx@loadstyle@ending{.style}
\def\libx@LoadStyle#1{\typeout{Loading style: '#1\libx@loadstyle@ending'...}\makeatletter\input{#1\libx@loadstyle@ending}\gdef\libx@currentstyle{#1}}

\def\@libx@getcurtar#1{% we expect i and curboxid to be set
#1:\libx@get{ListMen}\i%
}
\def\@libx@getrefpage{%
\libx@pageref*{\@libx@getcurtar{@libx}}%
}
\AtEndPreamble{%
    \let\libx@raw@addcontentsline\addcontentsline%
    \patchcmd{\libx@raw@addcontentsline}{\thepage}{\@libx@getrefpage}{}{}%
    \loop% we stop if replace throws error
        \patchcmd{\libx@raw@addcontentsline}{\@currentHref}{\@libx@getcurtar{@libx@ht}}{\iftrue}{\iffalse}%
    \repeat%
}

\def\@libx@addcontentsline#1#2#3#4{%
    % we want the exact id:
    \expandafter\protected@xdef\csname libx@box@#2@contentsline@#1\endcsname{%
        \noexpand\libx@raw@addcontentsline{#2}{#3}{#4}%
    }%
}

\def\libx@addcontentsline#1#2#3#4{%
    \@libx@addcontentsline{\arabic{#1}}{#2}{#3}{#4}%
}




% ----------------------------------------
% box definitions

% initialize the number within lock
\expandafter\ifx\expandafter!\libx@boxes@lockstyle@!% no lock:
\pgfqkeys{/tcb/new}{%
    lithie@box@number@within/.style={}%
}
% note effective width will be '\libx@numwidth@offset' higher
\setlength\libx@numwidth{.4cm-\libx@numwidth@offset}%
\else% got lock
\pgfqkeys{/tcb/new}{%
    lithie@box@number@within/.style={number within=\libx@boxes@lockstyle@}%
}
\setlength\libx@numwidth{.9cm-\libx@numwidth@offset}%
\fi

% TODO: restructure?
% TODO: allow without emblem and 'other' second style?
% #1 internal list name #2 internal list men #3 list of title text 
% #4 Emblem for starred variant #5 color
% #6 style to use #7 id
% #8 environment name
% #9 title
\def\libx@RegisterBoxPair#1#2#3#4#5#6#7#8#9{%
    \newlistof{#1}{#2}{#3}%
    \expandafter\setlength\csname cft#1numwidth\endcsname{\libx@numwidth}%
% Register no star
    \libx@RegisterBox{list name=#1,list men=#2,has emblem=true,in code=\noindent,%
    box color=#5,use style=libx@box@#6}{}{#8}{#9}{#7}%
    \libx@RegisterBox{list name=#1,list men=#2,has emblem=true,emblem=\protect#4,%
    in code=\noindent,box color=#5,use style=libx@box@#6}{}{#8*}{#9}{#7@s}%
}

% ----------------------------------------
% default boxstyle registration

% list of all boxes for style updates
\def\libx@list@boxes{}

\tcbset{%
    lithie@box@style@default/.style={%
        enhanced jigsaw,pad before break*=2mm,pad after break=2mm,%
        lines before break=3,before skip=0pt,boxrule=0mm,toprule=0.5mm,%
        bottomtitle=0.5mm,bottomrule=1.2mm,after skip=0pt,%
        enlarge top by=0.2\baselineskip,enlarge bottom by=0.2\baselineskip,%
        sharp corners=south,breakable, colback=\libx@get{BoxColor}!5!white,colframe=\libx@get{BoxColor},tikz={#1}%
    },%
    lithie@box@style@default@plain/.style={%
        enhanced jigsaw,pad before break*=2mm,pad after break=2mm,%
        lines before break=3,before skip=0pt,boxrule=0mm,%
        enlarge top by=0.2\baselineskip,enlarge bottom by=0.2\baselineskip,attach title to upper={\medskip\\*},coltitle=black,boxsep=0pt,left=0pt,right=0pt,%
        opacityback=0,opacityframe=0,%
        breakable,tikz={#1}%
    }%
}

% get the new stlyes
\pgfqkeys{/tcb/new}{%
    lithie@box@style@default@init/.style={%
        auto counter,lithie@box@number@within%
    },%
    lithie@box@style@other@init/.style={%
        use counter from=#1%
    }%
}

\def\libx@title@strut{\vphantom{\large I}}

% #1 is prefix, #2 is number, #3 is text
\def\libx@typeset@title#1#2#3{\bgroup%
    \def\libx@tmp@title{\libx@get{Emblem} #2 #3~}%
    \textbf{\textsc{\libx@title@strut{}\libx@tmp@title} \hfill \parbox[t]{\linewidth-\widthof{\libx@tmp@title}-1em}{\raggedleft\textbf{#1}}}%
\egroup}


% #1 Name of the style
% #2 other options
\def\libx@RegisterNewDefaultStyle#1#2{%
    \listadd{\libx@list@boxes}{#1}% \libx@get{StyleDerivative}
    \newtcolorbox[lithie@box@style@default@init]{libx@box@#1}[4][]{%
        lithie@box@style@default\libx@get{StyleDerivative}={##1},##3,#2,%
        title={\libx@typeset@title{##4}{##2}{\thetcbcounter}}%
    }%
}

% #1 Name of style
% #2 style update (#1-#4)
\def\libx@UpdateBoxStyle#1#2{%
    \renewtcolorbox[lithie@box@style@other@init={libx@box@#1}]{libx@box@#1}[4][]{%
        #2
    }%
}
% simple swap for consume
\def\@libx@UpdateHelper#1#2{\libx@UpdateBoxStyle{#2}{#1}}

\def\libx@UpdateAllBoxStyles#1{%
    \forlistloop{\@libx@UpdateHelper{#1}}{\libx@list@boxes}%
}


% ----------------------------------------
% default boxes

\libx@RegisterNewDefaultStyle{Definition}{}

\def\definitionsname{List of Definitions}
\libx@RegisterBoxPair%
% List definition and emblem:
{definitions}{ldefs}{\definitionsname}{\faStar}%
% color, style, id:
{purple}{Definition}{def}%
% environment name and Prefix:
{definition}{Definition}


\libx@RegisterNewDefaultStyle{Bemerkung}{}
% TODO: replace with 'ListText' update?
\def\remarksname{List of Remarks}
\libx@RegisterBoxPair%
% List definition and emblem:
{remarks}{lrem}{\remarksname}{\faStar}%
% color, style, id:
{teal}{Bemerkung}{bem}%
% environment name and Prefix:
{bemerkung}{Bemerkung}


\libx@RegisterNewDefaultStyle{Satz}{}

\def\theoremsname{List of Theorems}
\libx@RegisterBoxPair%
% List definition and emblem:
{theorems}{ltheo}{\theoremsname}{\faStar}%
% color, style, id:
{orange}{Satz}{sat}%
% environment name and Prefix:
{satz}{Satz}


\libx@RegisterNewDefaultStyle{Beispiel}{}

\def\examplesname{List of Examples}
\libx@RegisterBoxPair%
% List definition and emblem:
{examples}{lexa}{\examplesname}{\faStar}%
% color, style, id:
{olive}{Beispiel}{bei}%
% environment name and Prefix:
{beispiel}{Beispiel}

% ----------------------------------------
% Utility control

% TODO: make more of them
% starred variant sets both
% #1 derivative to use
% #2 boxname
\newcommand*{\SetBoxPlain}{%
    \@ifstar\libx@setboth@boxplain\libx@set@boxplain
}

\newcommand*{\libx@setboth@boxplain}[2][@plain]{%
    \libx@set@boxplain[#1]{#2}%
    \libx@set@boxplain[#1]{#2*}%
}

\newcommand*{\libx@set@boxplain}[2][@plain]{%
    \libx@update@boxdata{\@nameuse{@libx@map@envshort@#2}}{StyleDerivative}{#1}%
}

% ----------------------------------------

\newcommand*{\SetBoxesPlain}{%
    \@ifstar\libx@setboth@boxesplain\libx@set@boxesplain%
}

\newcommand*{\libx@setboth@boxesplain}[2][@plain]{%
    \forcsvlist{\SetBoxPlain*[#1]}{#2}%
}

\newcommand*{\libx@set@boxesplain}[2][@plain]{%
    \forcsvlist{\SetBoxPlain[#1]}{#2}%
}

% ----------------------------------------

\newcommand*{\SetBoxDisabled}{%
    \@ifstar\libx@setboth@boxdisabled\libx@set@boxdisabled%
}


\newcommand*{\libx@setboth@boxdisabled}[2][false]{%
    \libx@set@boxdisabled[#1]{#2}%
    \libx@set@boxdisabled[#1]{#2*}%
}

\newcommand*{\libx@set@boxdisabled}[2][false]{%
    \libx@update@boxif{\@nameuse{@libx@map@envshort@#2}}{BoxEnabled}{#1}%
}

% ----------------------------------------

\newcommand*{\SetBoxesDisabled}{%
    \@ifstar\libx@setboth@boxesdisabled\libx@set@boxesdisabled%
}

\newcommand*{\libx@setboth@boxesdisabled}[2][false]{%
    \forcsvlist{\SetBoxDisabled*[#1]}{#2}%
}

\newcommand*{\libx@set@boxesdisabled}[2][false]{%
    \forcsvlist{\SetBoxDisabled[#1]}{#2}%
}

% ----------------------------------------

% maybe with rgb support?
% ifstar: include 'starred' variant
% #1 box id, #2 new color
\newcommand*{\SetBoxColor}{%
    \@ifstar\libx@setboth@boxcolor\libx@set@boxcolor%
}

\def\libx@setboth@boxcolor#1#2{%
    \libx@set@boxcolor{#1}{#2}%
    \libx@set@boxcolor{#1*}{#2}%
}

\def\libx@set@boxcolor#1#2{%
    \libx@update@boxdata{\@nameuse{@libx@map@envshort@#1}}{BoxColor}{#2}%
}


% ----------------------------------------
% Ref system

% ref box with given label
% if starred hide title
\newcommand*\boxref{%
    \@ifstar\libx@num@nameref\libx@nameref%
}
\robustify{\boxref}

\def\@libx@num@nameref#1 (#2)#3\@nil{#1}

\def\libx@thirdoffive#1#2#3#4#5{#3}
\def\libx@num@nameref#1{%
    % assure nameref:
    \libx@namerefprobe{}%
    % we directly access the label def
    \ifcsname r@#1\endcsname%
        \protected@edef\libx@tmp{\@nameuse{r@#1}}%
        \protected@edef\libx@tmp{\expandafter\libx@thirdoffive\libx@tmp\relax\relax\relax\relax\relax}%
        \protected@edef\libx@tmp{\noexpand\@libx@num@nameref\libx@tmp\noexpand\@nil}%
        \libx@hyperref[#1]{\libx@tmp}%
    \else%
        \typeout{Warning boxref-num '#1' not found.}%
    \fi%
}

% TODO: maybe allow to use 'Def' instead of 'Definition'?
% allow rename as with normal nameref?
% Note: this is a reimplementation as the behaviour might change
% note without star this is same as boxref (allows better let's)
\newcommand*\boxnameref{%
    \@ifstar\libx@short@nameref\libx@nameref%
}
\robustify{\boxnameref}

\def\@libx@short@nameref#1 (#2)#3\@nil{#2}

\def\libx@thirdoffive#1#2#3#4#5{#3}
\def\libx@short@nameref#1{%
    % assure nameref:
    \libx@namerefprobe{}%
    % we directly access the label def
    \ifcsname r@#1\endcsname%
        \protected@edef\libx@tmp{\@nameuse{r@#1}}%
        \protected@edef\libx@tmp{\expandafter\libx@thirdoffive\libx@tmp\relax\relax\relax\relax\relax}%
        \protected@edef\libx@tmp{\noexpand\@libx@short@nameref\libx@tmp\noexpand\@nil}%
        \libx@hyperref[#1]{\libx@tmp}%
    \else%
        \typeout{Warning boxref-short '#1' not found.}%
    \fi%
}


% ----------------------------------------
% Color Palettes Control

\iflibx@cpalette@
\@ifundefined{cpl@registered@palettes}{%
    \PackageError{lithie-boxes}{cpalette requested, but package not loaded}
    {You have to load the 'color-palettes' package yourself if you use the 'cpalette'-Option.}%
}{% Add to the hook..
}
\let\libx@old@cpl@hooks\cpl@hooks%
\def\cpl@hooks{% Add to the hook
    \libx@old@cpl@hooks%
    \libx@cpalette@hook%
}
\def\libx@cpalette@hook{%
\libx@setboth@boxcolor{definition}{paletteA}%
\libx@setboth@boxcolor{bemerkung}{gray}%
\libx@setboth@boxcolor{satz}{paletteC}%
\libx@setboth@boxcolor{beispiel}{gray}%
}
\fi

% ----------------------------------------
% Auto style

\iflibx@autostyle@
\libx@setboth@boxesplain{bemerkung}%
\libx@setboth@boxesplain{beispiel}%
\fi

% ----------------------------------------------
% User commands

\let\LoadStyle\libx@LoadStyle
\let\RegisterBox\libx@RegisterBox
\let\RegisterNewDefaultStyle\libx@RegisterNewDefaultStyle

\endinput