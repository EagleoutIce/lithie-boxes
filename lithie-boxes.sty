%% lithie-boxes.sty
%%
%% -----------------------------------------
%% Florian Sihler, 30.09.2020
%%
%% Standalone and improved box-module of lilly
%% boxes. This variant won't use the 
%% tcbtheorems lib to allow more flexibility.

% make with emblems on the right side?

\errorcontextlines 999999

% TODO: allow dynamic loading of box styles

%% Packages
\RequirePackage{tcolorbox,environ,tocloft,calc,amssymb,fontawesome}
\tcbuselibrary{skins,breakable,hooks}
%% lengths

% \newlength\libx@


% default colors TODO: colors
% TODO: option to set color directly

\colorlet{libx@color@definition}{purple}

%% pgfkeys of boxes
\newif\iflibx@HasEmblem@
\newif\iflibx@CustomList@
\newif\iflibx@BoxEnabled@
\newif\iflibx@UseBox@
\pgfkeys{
    /libx@keys/.is family, /libx@keys,
    name/.store in = \libx@box@Name,
    title/.store in = \libx@box@Title,
    box color/.store in = \libx@box@BoxColor,
    preCode/.store in = \libx@box@PreCode,
    inCode/.store in = \libx@box@InCode,
    outCode/.store in = \libx@box@OutCode,
    postCode/.store in = \libx@box@PostCode,
    usestyle/.store in = \libx@box@UseStyle,
    emblem/.store in = \libx@box@Emblem,
    hasemblem/.is if=libx@HasEmblem@,
    customlist/.is if=libx@CustomList@,
    boxenabled/.is if=libx@BoxEnabled@,
    usebox/.is if = libx@UseBox@,
    lock/.store in = \libx@box@Lock,
    listname/.store in = \libx@box@ListName,
    listtext/.store in =\libx@box@ListText,
    listmen/.store in =\libx@box@ListMen,
    defaults/.style={%
        name=noname, title={\noexpand\libx@box@Name},%
        box color=black,%
        usestyle=libx@box@Definition,%
        emblem={}, listname={\noexpand\libx@box@Name},%
        listtext={Alle \noexpand\libx@box@Name}, preCode={}, inCode={},%
        outCode={}, postCode={},lock={}, customlist=true,
        listmen=NO, boxenabled=true, usebox=true%
    }
}
% TODO: listmen NO?

% #1 boxid, #2 key
\def\libx@persist#1#2{%
\expandafter\protected@xdef\csname libx@box@perist@#1@#2\endcsname{\@nameuse{libx@box@#2}}%
}

\def\libx@box@get#1#2{\@nameuse{libx@box@perist@#1@#2}}
\def\libx@get#1{\@nameuse{libx@box@perist@\libx@boxid @#1}}
\def\libx@get@ifempty#1#2#3{%
    \protected@edef\@libx@tmp{\@nameuse{libx@box@perist@\libx@boxid @#1}}%
    \expandafter\ifx\expandafter!\@libx@tmp!%
    #2\else#3\fi%
}

% #1 boxud, #2 key
\def\libx@persistif#1#2{\bgroup\globaldefs=1% true/false set must be global too
\expandafter\newif\csname iflibx@box@perist@#1@#2@\endcsname%
% we assgign the same value as the general if
\@nameuse{iflibx@#2@}%
    \@nameuse{libx@box@perist@#1@#2@true}%
\else%
    \@nameuse{libx@box@perist@#1@#2@false}%
\fi\egroup}

\def\libx@box@if#1#2{\@nameuse{iflibx@box@perist@#1@#2@}}
\def\libx@if#1#2#3{\@nameuse{iflibx@box@perist@\libx@boxid @#1@}#2\else#3\fi}

% #1 Boxkeys, #2 tikzkeys for box
% #3 Boxname (set boxnamekey)
% #4 Title (boxtitlekey)
% #5 GroupId
\def\libx@RegisterBox#1#2#3#4#5{\bgroup%
    \edef\libx@boxid{#5}%
    \pgfkeys{/libx@keys,defaults,#1,name=#3,title=#4}%
    \forcsvlist{\libx@persist{\libx@boxid}}{Name,Title,BoxColor,PreCode,InCode,%
                                            Outcode,PostCode,UseStyle,Emblem,%
                                            Lock,ListName,ListText,ListMen}%
    \forcsvlist{\libx@persistif{\libx@boxid}}{HasEmblem,CustomList,%
                                              BoxEnabled,UseBox}%
    % setup id counter:
    \@ifundefined{c@@libx@box@\libx@get{ListMen}@id}{%
        \newcounter{@libx@box@\libx@get{ListMen}@id}%
        \AtEndDocument{\bgroup\edef\libx@boxid{#5}% just to carry for sub commands
            \foreach \i in {1,...,\arabic{@libx@box@\libx@get{ListMen}@id}}{% 
                \@nameuse{libx@box@\libx@get{ListMen}@contentsline@\i}%
            }%
        \egroup}%
    }{}
% Define the main environment of the box
% TODO: if star?
\globaldefs=1
    \newenvironment{#3}[2][]{% TODO: use name and opt args
        \edef\libx@boxid{#5}%
% First we check if the box is disabled
        \libx@if{BoxEnabled}{%
            \libx@read@box@default{#5}{##1}{##2}{#2}% TODO: settings
        }{% 
            % the expandafter hinders the tokens to be read when libx@if gets expanded and is false
            \expandafter\libx@read@box@hidden%
        }\ignorespaces%
    }{% end of defined environment
        \libx@if{BoxEnabled}{%
            \libx@read@box@default@end{#5}% Extra for command% TODO: settings
        }{%
            \endlibx@read@box@hidden%
        }%
    }%
\globaldefs=0
\egroup}

% The boxes
\NewEnviron{libx@read@box@hidden}{}

% #1 id, #2 args, #3 title, #4 default tikz args
\def\libx@read@box@default#1#2#3#4{\begingroup%
    \edef\libx@boxid{#1}%
    \libx@get{PreCode}%
% we check if we use the box style
    \libx@if{UseBox}{%
        \libx@box@usestyle%
    }{%
        \libx@box@useplainstyle%
    }%
    \begin{\libx@get{UseStyle}}%
            [% Tikz arguments:
                #4%
            ]{% Title (braces guard):
            \hypertarget{@libx@ht:\libx@get{ListMen}\arabic{@libx@box@\libx@get{ListMen}@id}}{\libx@get{Title}}%
            }{% Further arguments for tcolorbox
                #2, libx@box@current@style@modification,%
                before upper app={\ignorespacesafterend},%
                before title pre={% TODO: emblem
                    \@libx@box@title@pre{#3}%
                    \label{auto:\libx@get{ListMen}\thetcbcounter}%
                    \label{@libx:\libx@get{ListMen}\arabic{@libx@box@\libx@get{ListMen}@id}}%
                    {#2}%
                }%
            }{#3}%
    \libx@get{InCode}%
\endgroup}

\def\libx@read@box@default@end#1{\begingroup
    \edef\libx@boxid{#1}%
% execute the post codes
    \libx@get{OutCode}%
    \end{\libx@get{UseStyle}}%
    \libx@get{PostCode}%
\endgroup\ignorespacesafterend}

% style
\def\libx@box@usestyle{%
    \tcbset{libx@box@current@style@modification/.style={}}% No Modifications needed :D
}

\def\libx@box@useplainstyle{%
    \tcbset{libx@box@current@style@modification/.style={}}% TODO: plain design
}

% #1: title
\def\@libx@box@title@pre#1{%
    \libx@if{CustomList}{%
        \stepcounter{@libx@box@\libx@get{ListMen}@id}%
        \libx@if{HasEmblem}{%
            % We register with emblem
            \expandafter\@libx@box@list@add@element@emblem%
        }{%
            % We register without emblem
            \expandafter\@libx@box@list@add@element%
        }% args:
        {\libx@get{ListName}}% list name
        {\libx@get{ListMen}}% list men
        {\thetcbcounter}% counter
        {#1}% title
        {\libx@get{Emblem}}% may be ignored
        {@libx@box@\libx@get{ListMen}@id}% the id will be used to shiput list add
        \ignorespacesafterend%
    }{}% Do nothing
}

\def\libx@sp{\hskip.1cm}
% #5 will be dropped as it is the emblem
\def\@libx@box@list@add@element#1#2#3#4#5#6{%
    \refstepcounter{#1}%
    \libx@get@ifempty{Lock}{%
        \libx@addcontentsline{#6}{#2}{#1}{\makebox[.4cm][r]{#3}\libx@sp#4}%
    }{%
        \libx@addcontentsline{#6}{#2}{#1}{\makebox[.75cm][r]{#3}\libx@sp#4}%
    }%
}

\def\@libx@box@list@add@element@emblem#1#2#3#4#5#6{%
    \refstepcounter{#1}%
    \libx@get@ifempty{Lock}{%
        \libx@addcontentsline{#6}{#2}{#1}{\makebox[.4cm][r]{#3}\libx@sp\makebox[.4cm][c]{#5}\libx@sp\ignorespaces#4}%
    }{%
        \libx@addcontentsline{#6}{#2}{#1}{\makebox[.75cm][r]{#3}\libx@sp\makebox[.4cm][c]{#5}\libx@sp\ignorespaces#4}%
    }%
}

\def\libx@loadstyle@ending{.style}
\def\libx@LoadStyle#1{\typeout{Loading style: '#1\libx@loadstyle@ending'...}\makeatletter\input{#1\libx@loadstyle@ending}}

% TODO: we have a problem. if there are floating environments 
% the ids may be in the wrong order.
% TODO:
% - add a unique id to every box
% - this id will be incremented constantly (globally)
% - and used to sort the 'writefile' commands.
% TODO:
% - add option for shorter entry in listof...
% - improve listof-structure
% - allow better naming of list'of' blahblah
% ...
% #1 id order #2#3#4 - default args for addcontentsline

\def\@libx@getcurtar#1{% we expect i and curboxid to be set
#1:\libx@get{ListMen}\i%
}
\def\@libx@getrefpage{%
\pageref*{\@libx@getcurtar{@libx}}%
}
\AtEndPreamble{%
    \let\libx@raw@addcontentsline\addcontentsline%
    \patchcmd{\libx@raw@addcontentsline}{\thepage}{\@libx@getrefpage}{}{}%
    % TODO: loop? this should be done until no more present!
    \patchcmd{\libx@raw@addcontentsline}{\@currentHref}{\@libx@getcurtar{@libx@ht}}{}{}%
    \patchcmd{\libx@raw@addcontentsline}{\@currentHref}{\@libx@getcurtar{@libx@ht}}{}{}%
    \patchcmd{\libx@raw@addcontentsline}{\@currentHref}{\@libx@getcurtar{@libx@ht}}{}{}%
    \patchcmd{\libx@raw@addcontentsline}{\@currentHref}{\@libx@getcurtar{@libx@ht}}{}{}%
}

\def\@libx@addcontentsline#1#2#3#4{%
    % we want the exact id:
    \expandafter\protected@xdef\csname libx@box@#2@contentsline@#1\endcsname{%
        \noexpand\libx@raw@addcontentsline{#2}{#3}{#4}%
    }%
}

\def\libx@addcontentsline#1#2#3#4{%
    \@libx@addcontentsline{\arabic{#1}}{#2}{#3}{#4}%
}



% ----------------------------------------
% TODO: group lists better so they get created automatically and no repetition?
\newlistof{definitions}{ldefs}{List of Definitions}
% TODO: besser emblem support if 'starred' variant
\libx@RegisterBox{listname=definitions,listmen=ldefs,hasemblem=true,inCode=\noindent,box color=libx@color@definition,lock=true}{}{definition}{Definition}{def}
\libx@RegisterBox{listname=definitions,listmen=ldefs,hasemblem=true,emblem=\protect\faStar,inCode=\noindent,lock=true,box color=libx@color@definition}{}{definition*}{Definition}{defStar}



% ----------------------------------------
% default boxstyle



\tcbset{%
    lithi@box@style@default/.style={%
        enhanced jigsaw,pad before break*=2mm,pad after break=2mm,%
        lines before break=4,before skip=0pt,boxrule=0mm,toprule=0.5mm,%
        bottomtitle=0.5mm,bottomrule=1.2mm,after skip=0pt,%
        enlarge top by=0.2\baselineskip,enlarge bottom by=0.2\baselineskip,%
        sharp corners=south,breakable%
    },%
    lithie@box@style@definition/.style={%
        lithi@box@style@default,colback=libx@color@definition!5!white,colframe=libx@color@definition,tikz={#1}%
    }%
}
% get the new stlyes
\pgfqkeys{/tcb/new}{%
    lithie@box@style@definition@init/.style={%
        auto counter,number within=section,% number within=section,% TODO: allow option for this
    },%
    lithie@box@style@definition@other@init/.style={%
        use counter from=libx@box@Definition%
    }%
}

\def\libx@title@strut{\vphantom{\large I}}

% #1 is prefix, #2 is number, #3 is text
\def\libx@typeset@title#1#2#3{\bgroup%
    \def\libx@tmp@title{\libx@get{Emblem} #2 #3~}%
    \textbf{\textsc{\libx@title@strut{}\libx@tmp@title} \hfill \parbox[t]{\linewidth-\widthof{\libx@tmp@title}-1em}{\raggedleft\textbf{#1}}}%
\egroup}

\newtcolorbox[lithie@box@style@definition@init]{libx@box@Definition}[4][]{%
    lithie@box@style@definition={#1},#3,%
    title={\libx@typeset@title{#4}{#2}{\thetcbcounter}}%
}

\newtcolorbox[lithie@box@style@definition@other@init]{libx@box@Definition*}[4][]{%
    llithie@box@style@definition={#1},#3,%
    title={\libx@typeset@title{#4}{#2}{\thetcbcounter}}%
}


























% ----------------------------------------------
% User commands

\let\LoadStyle\libx@LoadStyle
\let\RegisterBox\libx@RegisterBox

\endinput